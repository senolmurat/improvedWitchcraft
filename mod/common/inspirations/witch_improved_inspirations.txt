trinket_inspiration = {
	gold = {
		value = basic_fund_inspiration_cost

		if = {
			limit = {
				# Must always have a inspiration owner to have cost modifiers.
				exists = scope:inspiration_owner

				# Local artisans charge a fixed fee so the cost matches up with the cost listed in the "Comission Artifact" decision.
				NOT = { 
					scope:inspiration_owner = {
						has_character_flag = local_artisan
					}
				}
			}
			
			# Modify the cost based on the inspiration owner's relevant skills
			multiply = {
				# Get the squared value of our inspiration skill's averages (0 = 0, 5 = 25, 10 = 100, 20 = 400)
				value = scope:inspiration_owner.smith_inspiration_average_skill_value
				multiply = scope:inspiration_owner.smith_inspiration_average_skill_value

				# Reduce by a factor of 100 to get the base cost multiplier (0 = 0, 5 = 0.25, 10 = 1.00, 20 = 2.00)
				multiply = 0.01

				# Additional modifier so it's easy to tweak overall cost.
				multiply = inspiration_cost_skill_multiplier

				# Min cost cannot drop beyond 50%
				min = 0.5
			}
		}
		
		# If you used the "Comission Artifact" decision and have a relevant estate buildling, you get a discount
		if = {
			limit = {
				exists = scope:inspiration_owner
				scope:inspiration_owner = {
					has_character_flag = local_artisan
				}
				liege.domicile ?= { has_domicile_parameter = estate_reduce_commission_artifact_cost } # We check liege specifically because scope:inspiration_sponsor does not exist yet
			}
			multiply = estate_reduce_commission_artifact_cost_value
		}
		round = yes
	}
	progress_chance = 75

	on_creation = {
		hidden_effect = { #If they haven't specified what they're gonna make we decide it here
			scope:inspiration_owner = {
				if = {
					limit = {
						NOT = { exists = var:artifact_smith_type }
					}
					random_list = {
						10 = { #Unspecified! Sponsor can choose
							trigger = {
								trigger_if = {
									limit = {
										liege ?= {
											is_landless_adventurer = yes
										}
									}
									liege = {
										is_landless_adventurer = no
									}
								}
								trigger_else = {
									always = yes
								}
							}
							modifier = {
								add = 20
								has_personality_submissive_trigger = yes
							}
							ai_value_modifier = {
								ai_boldness = -0.5
								ai_energy = -0.25
							}
						}
						90 = {
							set_variable = {
								name = artifact_smith_type
								value = flag:smith_type_brooch
							}
						}
					}
				}
			}
		}
	}
	
	is_valid = {
		
	}
	is_sponsor_valid = {
		ep1_is_sponsor_valid_inspiration_basic = yes
	}
	can_sponsor = {
		ep1_can_sponsor_inspiration_basic = yes
	}

	on_monthly = {
		scope:inspiration_sponsor = {
			trigger_event = {
				on_action = inspiration_maintenance_events
			}
			trigger_event = {
				on_action = inspiration_ongoing_events
			}
		}
	}
	on_complete = {
		scope:inspiration_owner = {
			set_variable = {
				name = created_artifact_for
				value = scope:inspiration_sponsor
			}
			set_variable = {
				name = created_artifact_type
				value = flag:smith
			}
			grant_inspiration_reward_effect = yes
		}
		scope:inspiration_sponsor = { #To give the right flavor for the completion event
			add_character_flag = {
				flag = trigger_smith_completion_event
				days = 1 
			}
			trigger_event = {
				on_action = inspiration_completed_events
			}
		}
	}
	on_sponsor = {
		scope:inspiration_owner = {
			# To ensure that some time has passed before the first event
			# This flag is set on the inspiration owner since the sponsor might be sponsoring multiple inspirations at once
			add_character_flag = {
				flag = fund_smith_inspiration_event_cooldown
				days = 60
			}
		}
		scope:inspiration_sponsor = {
			trigger_event = {
				on_action = inspiration_start_events
			}
		}
	}
	on_owner_death = {
		save_scope_value_as = {
			name = smith_inspiration
			value = yes
		}
		if = {
			limit = { exists = scope:inspiration_sponsor }
			scope:inspiration_sponsor = {
				trigger_event = {
					on_action = inspiration_invalidated_events
				}
			}
		}
	}
	on_sponsor_invalidated = {
		save_scope_value_as = {
			name = smith_inspiration
			value = yes
		}
		if = {
			limit = { exists = scope:inspiration_sponsor }
			scope:inspiration_sponsor = {
				trigger_event = {
					on_action = inspiration_invalidated_events
				}
			}
		}
	}
}